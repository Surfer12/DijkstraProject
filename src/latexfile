\documentclass[a4paper,12pt]{article}
\usepackage{amsmath, amssymb, geometry, fancyhdr, hyperref, listings}
\usepackage{graphicx}
\usepackage{tikz}
\usepackage{enumitem}
\usetikzlibrary{graphs}

% Page setup
\geometry{margin=1in}
\setlength{\headheight}{15pt}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{Dijkstra's Algorithm Research}
\fancyhead[R]{\thepage}

% Title and Author
\title{\textbf{Comprehensive Research Document on Dijkstra's Algorithm}}
\author{Prepared for In-depth Study and Implementation}
\date{\today}

\begin{document}

\maketitle

\section*{Abstract}
Dijkstra's algorithm is a fundamental tool for finding the shortest paths in a weighted graph. This document provides an in-depth overview, implementation strategies, example graphs, and optimization techniques, ensuring a practical understanding of the algorithm's capabilities and applications.

\tableofcontents

\newpage

\section{Introduction}
\textbf{Definition:} Dijkstra's algorithm is a graph traversal method that calculates the shortest path from a source node to all other nodes in a weighted graph.

\textbf{Key Concepts:}
\begin{itemize}
    \item \textbf{Shortest Path:} Minimum cost path between two nodes.
    \item \textbf{Edge Relaxation:} Updates the shortest known distance to a node via a neighboring node.
    \item \textbf{Priority Queue:} Maintains the order of nodes based on their tentative distances.
    \item \textbf{Path Reconstruction:} Tracks the sequence of nodes leading to the destination.
\end{itemize}

\section{Algorithm Workflow}
\textbf{Steps:}
\begin{enumerate}
    \item Initialize distances: Set the source node's distance to 0 and all others to infinity.
    \item Maintain a priority queue: Always process the node with the smallest tentative distance.
    \item Perform edge relaxation: Update distances of neighbors through the current node.
    \item Reconstruct the shortest path: Trace back through a map of previous nodes.
\end{enumerate}

\section{Implementation Details}
\subsection{Graph Representation}
\begin{lstlisting}[language=Java, caption=Graph Representation]
Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();
graph.put(0, Map.of(1, 4, 6, 7));
graph.put(1, Map.of(0, 4, 2, 9, 6, 11));
graph.put(6, Map.of(0, 7, 1, 11, 7, 1));
\end{lstlisting}

\subsection{Priority Queue Usage}
\begin{lstlisting}[language=Java, caption=Priority Queue for Processing]
PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> distances.get(n)));
pq.offer(new Node(startNode, 0)); // Add source node
\end{lstlisting}

\subsection{Edge Relaxation}
\begin{lstlisting}[language=Java, caption=Edge Relaxation Logic]
for (Edge edge : graph.get(currentNode)) {
    int newDistance = distances.get(currentNode) + edge.weight;
    if (newDistance < distances.get(edge.destination)) {
        distances.put(edge.destination, newDistance);
        previousNodes.put(edge.destination, currentNode);
        pq.offer(edge.destination);
    }
}
\end{lstlisting}

\subsection{Path Reconstruction}
\begin{lstlisting}[language=Java, caption=Reconstructing the Shortest Path]
private List<Integer> reconstructPath(int destination) {
    List<Integer> path = new ArrayList<>();
    for (Integer at = destination; at != null; at = previousNodes.get(at)) {
        path.add(0, at);
    }
    return path;
}
\end{lstlisting}

\section{Case Studies}
\subsection{Example 1: Simple Graph}
\textbf{Graph Representation:}
\begin{center}
\begin{tikzpicture}
    \graph[nodes={circle, draw}, edges={->, thick}] {
        0 --["7"] 1;
        0 --["9"] 2;
        0 --["14"] 5;
        1 --["10"] 2;
        1 --["15"] 3;
        2 --["2"] 5;
    };
\end{tikzpicture}
\end{center}

\textbf{Shortest Path:} 0 → 2 → 5\\
\textbf{Total Distance:} 11 units.

\subsection{Example 2: Extended Graph}
\textbf{Graph Representation:}
\begin{center}
\begin{tikzpicture}
    \graph[nodes={circle, draw}, edges={->, thick}] {
        0 --["4"] 1;
        0 --["7"] 6;
        1 --["20"] 7;
        7 --["3"] 8;
    };
\end{tikzpicture}
\end{center}

\textbf{Shortest Path:} 0 → 6 → 7 → 8\\
\textbf{Total Distance:} 11 units.

\section{Performance Analysis}
\textbf{Time Complexity:} O((V + E) log V) using a binary heap.\\
\textbf{Space Complexity:} O(V + E) with adjacency lists.

\textbf{Key Optimizations:}
\begin{itemize}
    \item Early Termination: Stop processing when the destination node is dequeued.
    \item Efficient Relaxation: Skip processing edges if the current node's distance is infinity.
    \item Memory Optimization: Use primitive arrays for dense graphs.
\end{itemize}

\section{Applications}
\begin{itemize}
    \item Network Routing (e.g., Internet packet forwarding).
    \item Geographic Navigation (e.g., GPS).
    \item Game Development (e.g., AI pathfinding).
    \item Resource Optimization (e.g., logistics planning).
\end{itemize}

\section{Conclusion}
Dijkstra's algorithm is versatile and efficient for solving shortest path problems in graphs with non-negative edge weights. Its applications are broad, spanning from network optimization to real-world navigation systems.

\end{document}